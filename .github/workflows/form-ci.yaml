name: Build and Push

on:
  push:
    branches:
      - main

# env:
#   GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
#   REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # //write permission is required to push images to GHCR

    env:
      REGISTRY: ghcr.io/${{ secrets.GHCR_USERNAME }}
    
    strategy:
      matrix:
        image:
          - name: form-api
            path: fill-api
          - name: form-vite
            path: fill-vite

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # - name: Install required CLI tools
      #   run: sudo apt-get update && sudo apt-get install -y curl jq coreutils grep

      - name: Compare version and decide to build
        id: version_check
        run: |
          IMAGE=${{ matrix.image.name }}
          APP_PATH=${{ matrix.image.path }}
          IMAGE_PATH="${{ secrets.GHCR_USERNAME }}/$IMAGE"

          DOCKERFILE="$APP_PATH/Dockerfile"
          current=$(grep '^LABEL version' "$DOCKERFILE" | cut -d'"' -f2 | head -n1)
          echo "Current version in Dockerfile: $current"

          AUTH_TOKEN=$(curl -s "https://ghcr.io/token?scope=repository:${IMAGE_PATH}:pull" \
            -u "${{ secrets.GHCR_USERNAME }}:${{ secrets.GHCR_TOKEN }}" | jq -r .token)

          if [[ -z "$AUTH_TOKEN" ]]; then
            echo "Failed to obtain AUTH_TOKEN. Exiting."
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          tags=$(curl -s -H "Authorization: Bearer ${AUTH_TOKEN}" \
            "https://ghcr.io/v2/$IMAGE_PATH/tags/list" | jq -r '.tags[]?')

          latest_version=$(echo "$tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)

          if ! echo "$current" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9]+)?$'; then
            echo "Current version is not in semantic version format (X.Y.Z) - skipping"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Current version is in X.Y.Z format - proceeding"
            if [[ -z "$latest_version" ]]; then
              echo "No existing valid tags found - building"
              echo "changed=true" >> $GITHUB_OUTPUT
            elif [[ "$current" == "$latest_version" ]]; then
              echo "Current version $current is already existing - skipping"
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              highest_version=$(printf '%s\n%s' "$current" "$latest_version" | sort -V | tail -n1)
              if [[ "$current" == "$highest_version" ]]; then
                echo "Current version: $current > Latest: $latest_version - building"
                echo "changed=true" >> $GITHUB_OUTPUT
              else
                echo "Current version: $current < Latest: $latest_version - skipping"
                echo "changed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

          echo "version=$current" >> $GITHUB_OUTPUT
      
      # //Docker login
      - name: Login to Github container registry (GHCR)
        if: steps.version_check.outputs.changed == 'true'
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      # //Build and push image (matrix)
      - name: Build and push image
        if: steps.version_check.outputs.changed == 'true'
        run: |
          IMAGE=${{ matrix.image.name }}
          APP_PATH=${{ matrix.image.path }}
          VERSION=${{ steps.version_check.outputs.version }}

          echo "Building $IMAGE:$VERSION"
          docker build -t ${{ env.REGISTRY }}/$IMAGE:$VERSION $APP_PATH
          docker tag ${{ env.REGISTRY }}/$IMAGE:$VERSION ${{ env.REGISTRY }}/$IMAGE:latest
          docker push ${{ env.REGISTRY }}/$IMAGE:$VERSION
          docker push ${{ env.REGISTRY }}/$IMAGE:latest

      # //Summary
      - name: Post summary
        run: |
          echo "### CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ matrix.image.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.version_check.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build triggered: ${{ steps.version_check.outputs.changed }}" >> $GITHUB_STEP_SUMMARY

      # //Cleanup unused images and credential
      - name: Cleanup unused images and credential
        if: steps.version_check.outputs.changed == 'true'
        continue-on-error: true
        run: |
          docker rmi ${{ env.REGISTRY }}/${{ matrix.image.name }}:latest || true
          docker logout ghcr.io
          
      # docker image prune -f   # //uncomment and move under run: | -> if you want to remove unused images cache
  
  # //to send email 
  # notify:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: always() # //always run this job even if the previous one fails
  #   steps:
  #     - name: Send notification email
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         server_address: ${{ secrets.EMAIL_SERVER }}
  #         server_port: ${{ secrets.EMAIL_PORT }}
  #         username: ${{ secrets.EMAIL_USERNAME }}
  #         password: ${{ secrets.EMAIL_PASSWORD }} # //use app password if 2FA is enabled
  #         subject: |
  #           GitHub CI - Build ${{ needs.build-and-push.result }}
  #         to: ${{ secrets.EMAIL_TO }}
  #         from: GitHub Action <${{ secrets.EMAIL_USERNAME }}>
  #         body: |
  #           Build status: ${{ needs.build-and-push.result }}
  #           Repo: ${{ github.repository }}
  #           Commit: ${{ github.sha }}
  #           Triggered by: ${{ github.actor }}
  #           Workflow: ${{ github.workflow }}
  #           URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}