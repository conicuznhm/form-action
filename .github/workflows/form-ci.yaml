name: Build and Push

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io/${{ secrets.GHCR_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
          - name: form-api
            path: fill-api
          - name: form-vite
            path: fill-vite

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install jq
        run: sudo apt update && sudo apt install -y jq

      - name: Compare version and decide to build
        id: version_check
        run: |
          IMAGE=${{ matrix.image.name }}
          PATH=${{ matrix.image.path }}
          IMAGE_PATH="${{ secrets.GHCR_USERNAME }}/$IMAGE"

          DOCKERFILE="$PATH/Dockerfile"
          current=$(grep '^LABEL version' "$DOCKERFILE" | cut -d'"' -f2 | head -n1)
          echo "Current version in Dockerfile: $current"

          AUTH_TOKEN=$(curl -s "https://ghcr.io/token?scope=repository:${IMAGE_PATH}:pull" \
            -u "${{ secrets.GHCR_USERNAME }}:${{ secrets.GHCR_TOKEN }}" | jq -r .token)

          if [[ -z "$AUTH_TOKEN" ]]; then
            echo "Failed to obtain AUTH_TOKEN. Exiting."
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          tags=$(curl -s -H "Authorization: Bearer ${AUTH_TOKEN}" \
            "https://ghcr.io/v2/$IMAGE_PATH/tags/list" | jq -r '.tags[]?')

          latest_version=$(echo "$tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)

          if ! echo "$current" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Current version is not in semantic version format (X.Y.Z) - skipping"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Current version is in X.Y.Z format - proceeding"
            if [[ -z "$latest_version" ]]; then
              echo "No existing valid tags found - building"
              echo "changed=true" >> $GITHUB_OUTPUT
            elif [[ "$current" == "$latest_version" ]]; then
              echo "Current version $current is already existing - skipping"
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              highest_version=$(printf '%s\n%s' "$current" "$latest_version" | sort -V | tail -n1)
              if [[ "$current" == "$highest_version" ]]; then
                echo "Current version: $current > Latest: $latest_version - building"
                echo "changed=true" >> $GITHUB_OUTPUT
              else
                echo "Current version: $current < Latest: $latest_version - skipping"
                echo "changed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

          echo "version=$current" >> $GITHUB_OUTPUT
      
      # //Docker login
      - name: Login to Github container registry (GHCR)
        if: steps.version_check.outputs.changed == 'true'
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      # //Build and push image (matrix)
      - name: Build and push image
        if: steps.version_check.outputs.changed == 'true'
        run: |
          IMAGE=${{ matrix.image.name }}
          PATH=${{ matrix.image.path }}
          VERSION=${{ steps.version_check.outputs.version }}

          echo "Building $IMAGE:$VERSION"
          docker build -t $REGISTRY/$IMAGE:$VERSION $PATH
          docker tag $REGISTRY/$IMAGE:$VERSION $REGISTRY/$IMAGE:latest
          docker push $REGISTRY/$IMAGE:$VERSION
          docker push $REGISTRY/$IMAGE:latest

      # //Cleanup unused images and credential
      - name: Cleanup unused images and credential
        if: steps.version_check.outputs.changed == 'true'
        run: |
          docker rmi $REGISTRY/${{ matrix.image.name }}:latest || true
          docker logout ghcr.io
          
      # docker image prune -f   # //uncomment and move under run: | -> if you want to remove unused images cache
